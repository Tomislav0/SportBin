{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction FetchDataComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchDataComponent_table_5_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r3.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r3.username);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r3.password);\n  }\n}\nfunction FetchDataComponent_table_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 3)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Id\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Username\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Password\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"tbody\");\n    i0.ɵɵtemplate(10, FetchDataComponent_table_5_tr_10_Template, 7, 3, \"tr\", 4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.users);\n  }\n}\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.forecasts = [];\n    this.users = [];\n    http.get(baseUrl + 'weatherforecast').subscribe(result => {\n      this.forecasts = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'weatherforecast/admin').subscribe(result => {\n      console.log(result);\n      this.users = result;\n    }, error => console.error(error));\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 6,\n  vars: 2,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Weather forecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, FetchDataComponent_p_4_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(5, FetchDataComponent_table_5_Template, 11, 1, \"table\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.forecasts == null ? null : ctx.forecasts.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.forecasts.length);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;IAIAA,yBAA8B;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAW7CA,0BAA+B;IACzBA,YAAa;IAAAA,iBAAK;IACtBA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;IAC5BA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;;;;IAFxBA,eAAa;IAAbA,gCAAa;IACbA,eAAmB;IAAnBA,sCAAmB;IACnBA,eAAmB;IAAnBA,sCAAmB;;;;;IAZ7BA,gCAAyF;IAG/EA,kBAAE;IAAAA,iBAAK;IACXA,0BAAI;IAAAA,wBAAQ;IAAAA,iBAAK;IACjBA,0BAAI;IAAAA,wBAAQ;IAAAA,iBAAK;IAGrBA,6BAAO;IACLA,2EAIK;IACPA,iBAAQ;;;;IALeA,gBAAQ;IAARA,sCAAQ;;;ACRjC,OAAM,MAAOC,kBAAkB;EAI7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAH1D,cAAS,GAAsB,EAAE;IACjC,UAAK,GAAU,EAAE;IAGtBD,IAAI,CAACE,GAAG,CAAoBD,OAAO,GAAG,iBAAiB,CAAC,CAACE,SAAS,CAC/DC,MAAM,IAAI;MACT,IAAI,CAACC,SAAS,GAAGD,MAAM;IACzB,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;IAEDN,IAAI,CAACE,GAAG,CAAoBD,OAAO,GAAG,uBAAuB,CAAC,CAACE,SAAS,CACrEC,MAAM,IAAI;MACTG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;MACnB,IAAI,CAACK,KAAK,GAAGL,MAAM;IACrB,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EACH;;AAnBWR,kBAAkB;mBAAlBA,kBAAkB,4DAIS,UAAU;AAAA;AAJrCA,kBAAkB;QAAlBA,kBAAkB;EAAAY;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP/BjB,6BAAoB;MAAAA,gCAAgB;MAAAA,iBAAK;MAEzCA,yBAAG;MAAAA,0EAA0D;MAAAA,iBAAI;MAEjEA,+DAAqD;MAErDA,wEAeQ;;;MAjBJA,eAAwB;MAAxBA,6EAAwB;MAEqCA,eAAsB;MAAtBA,2CAAsB","names":["i0","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","forecasts","error","console","log","users","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\tomis\\source\\repos\\SportBin\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","C:\\Users\\tomis\\source\\repos\\SportBin\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts?.length\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>Id</th>\r\n      <th>Username</th>\r\n      <th>Password</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let user of users\">\r\n      <td>{{ user.id }}</td>\r\n      <td>{{ user.username }}</td>\r\n      <td>{{ user.password }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html',\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[] = [];\r\n  public users: any[] = [];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast').subscribe(\r\n      (result) => {\r\n        this.forecasts = result;\r\n      },\r\n      (error) => console.error(error)\r\n    );\r\n\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast/admin').subscribe(\r\n      (result) => {\r\n        console.log(result);\r\n        this.users = result;\r\n      },\r\n      (error) => console.error(error)\r\n    );\r\n  }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}